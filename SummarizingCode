import os
import requests
from transformers import BartForConditionalGeneration, BartTokenizer
from PyPDF2 import PdfReader
import io

# Load BART for Summarization
bart_model = BartForConditionalGeneration.from_pretrained("facebook/bart-large-cnn")
bart_tokenizer = BartTokenizer.from_pretrained("facebook/bart-large-cnn")

# Function to Extract Text from PDF
def extract_text_from_pdf(file_content):
    """Extracts text from a PDF file or byte content."""
    text = ""
    pdf_file = io.BytesIO(file_content) if isinstance(file_content, bytes) else open(file_content, "rb")
    reader = PdfReader(pdf_file)
    for page in reader.pages:
        text += page.extract_text()
    return text

# Function to Read Text from a File (local or URL)
def read_file(file_path):
    """Reads text from a local file or URL."""
    file_extension = os.path.splitext(file_path)[1].lower()

    # If the path is a URL, fetch the file content
    if file_path.startswith("http://") or file_path.startswith("https://"):
        try:
            response = requests.get(file_path)
            response.raise_for_status()  # Ensure we got a valid response
            if file_extension == '.pdf':
                return extract_text_from_pdf(response.content)
            elif file_extension == '.txt':
                return response.text
            else:
                return "Unsupported file format from URL. Please use a .txt or .pdf file."
        except requests.exceptions.RequestException as e:
            return f"Error downloading the file: {e}"

    # If it's a local file path, read the local file
    elif os.path.exists(file_path):
        try:
            if file_extension == '.txt':
                with open(file_path, 'r', encoding='utf-8') as file:
                    return file.read()
            elif file_extension == '.pdf':
                return extract_text_from_pdf(file_path)
            else:
                return "Unsupported file format. Please use a .txt or .pdf file."
        except Exception as e:
            return f"Error reading the file: {e}"
    else:
        return "Error: File not found."

def summarize_text(text):
    # Refined instruction for brevity and main idea extraction
    prompt_summary = f"Summarize the following text in 2-3 concise sentences, removing unnecessary details: \n\n{text}"

    # Tokenize the prompt text for summary
    inputs_summary = bart_tokenizer(prompt_summary, return_tensors="pt", max_length=1024, truncation=True)

    # Generate the summary with updated length constraints
    summary_ids = bart_model.generate(
        inputs_summary["input_ids"],
        max_length=50,  # Adjust the max length to a reasonable value
        min_length=20,  # Ensure it's not too long
        num_beams=4,
        early_stopping=True
    )

    # Decode and clean the output (remove prompt)
    summary = bart_tokenizer.decode(summary_ids[0], skip_special_tokens=True)
    summary = summary.replace(prompt_summary, "").strip()  # Remove the prompt from the response

    # Post-process to trim to 2-3 sentences
    summary = " ".join(summary.split()[:30])  # Limit to 30 words (approx. 2-3 sentences)

    # Now, extract the main idea from the same text
    prompt_main_idea = f"Extract the main idea of the following story in 1-2 sentences: \n\n{text}"

    # Tokenize the prompt for main idea
    inputs_main_idea = bart_tokenizer(prompt_main_idea, return_tensors="pt", max_length=1024, truncation=True)

    # Generate the main idea
    main_idea_ids = bart_model.generate(
        inputs_main_idea["input_ids"],
        max_length=30,  # Short main idea
        num_beams=4,
        early_stopping=True
    )

    # Decode and clean the main idea output
    main_idea = bart_tokenizer.decode(main_idea_ids[0], skip_special_tokens=True)
    main_idea = main_idea.replace(prompt_main_idea, "").strip()  # Remove the prompt from the response

    return summary.strip(), main_idea.strip()

# Function to split text into manageable chunks (to fit model input size)
def split_text_into_chunks(text, chunk_size=1000):
    """Splits the text into chunks that are no longer than the specified chunk_size."""
    words = text.split()
    chunks = []
    current_chunk = []
    
    for word in words:
        current_chunk.append(word)
        if len(" ".join(current_chunk)) > chunk_size:
            chunks.append(" ".join(current_chunk[:-1]))  # Add the chunk and discard the last word
            current_chunk = [word]  # Start a new chunk with the last word
    
    if current_chunk:  # Add any remaining words as the last chunk
        chunks.append(" ".join(current_chunk))
    
    return chunks

# Main Function to Handle User Input
def main():
    while True:
        print("Welcome to the chat bot!")
        
        # Ask user whether they want to paste or provide a link
        input_method = input("Do you want to (1) Paste your training data or (2) Provide a link to it? Please enter 1 or 2: ")
        
        if input_method == '1':
            # Option 1: Paste the training data
            training_data_text = input("Please paste your training data here: ")
        
        elif input_method == '2':
            # Option 2: Provide a link
            file_url = input("Please provide the link to your training data (e.g., a URL to a .txt or .pdf file): ")
            training_data_text = read_file(file_url)
        
        else:
            print("Invalid choice. Please restart the program and choose 1 or 2.")
            return
        
        # Handle errors if training data isn't loaded properly
        if "Error" in training_data_text or "Unsupported" in training_data_text:
            print(training_data_text)
            return
        
        # Choose the action: summarize or answer a question based on the input
        action = input("Do you want to (1) Summarize or (2) Ask a question about the training data? Please enter 1 or 2: ")
        
        if action == '1':
            # Summarize the user input using BART
            summary, main_idea = summarize_text(training_data_text)
            print("\nSummary:")
            print(summary)
            print("\nMain Idea:")
            print(main_idea)
        
        elif action == '2':
            # Ask a question and get an answer based on the training data using GPT-Neo
            question = input("Please enter your question about the training data: ")
            answer = answer_question_from_chunks(training_data_text, question)
            print("\nAnswer:")
            print(answer)
        
        else:
            print("Invalid choice. Please restart the program and choose 1 or 2.")
        
        # Ask if the user wants to continue or exit
        continue_choice = input("\nDo you want to continue using the program? (yes/no): ").lower()
        if continue_choice != 'yes':
            print("Exiting the program. Goodbye!")
            break  # Exit the loop and end the program

# Run the main function
if __name__ == "__main__":
    main()
